import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message

from src import config
from src.site_monitor import SiteMonitor
from src.proxy_manager import ProxyManager
from src.periodic_checker import periodic_check
from src.logger import logger

class AdminFilter(BaseFilter):
    """Filter for checking administrator access"""
    
    async def __call__(self, message: Message) -> bool:
        return str(message.from_user.id) in config.ADMINS

# Create filter instance
admin_filter = AdminFilter()

def get_speed_info(response_time: float) -> tuple[str, str]:
    """Returns emoji and description of response speed"""
    if response_time is None:
        return "‚ùì", "unknown"
    elif response_time < 200:
        return "‚ö°", "very fast"
    elif response_time < 500:
        return "üü¢", "fast"
    elif response_time < 1000:
        return "üü°", "medium"
    elif response_time < 3000:
        return "üü†", "slow"
    else:
        return "üî¥", "very slow"

# Bot and dispatcher initialization
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

dp.message.filter(admin_filter)

# Create monitor instances
site_monitor = SiteMonitor()
proxy_manager = ProxyManager()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Command /start"""
    welcome_text = """
ü§ñ **DOWN DETECTOR**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url>` - –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ `/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ `/list` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã
‚Ä¢ `/check` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã —Å–µ–π—á–∞—Å
‚Ä¢ `/status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–∫—Å–∏:**
‚Ä¢ `/proxy_add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url> <—Å—Ç—Ä–∞–Ω–∞>` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏
‚Ä¢ `/proxy_remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏
‚Ä¢ `/proxy_list` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏
‚Ä¢ `/proxy_test <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/add google https://google.com`
‚Ä¢ `/proxy_add us_proxy http://proxy.example.com:8080 us`
‚Ä¢ `/remove google`
    """
    
    await message.answer(welcome_text, parse_mode="Markdown")

@dp.message(Command("add"))
async def cmd_add_site(message: Message):
    """Command for adding a site"""
    try:
        # Parse command: /add name url
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url>`\n\n–ü—Ä–∏–º–µ—Ä: `/add google https://google.com`", parse_mode="Markdown")
            return
        
        name = parts[1].lower()
        url = parts[2]
        
        # Check URL format
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # Add site
        if await site_monitor.add_site(name, url, message.from_user.id):
            response_text = f"‚úÖ –°–∞–π—Ç **{name}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n\nURL: {url}\nüîÑ –ü—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
            await message.answer(response_text, parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –°–∞–π—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"Error adding site: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

@dp.message(Command("remove"))
async def cmd_remove_site(message: Message):
    """Command for removing a site"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n\n–ü—Ä–∏–º–µ—Ä: `/remove google`", parse_mode="Markdown")
            return
        
        name = parts[1].lower()
        
        if await site_monitor.remove_site(name):
            await message.answer(f"‚úÖ –°–∞–π—Ç **{name}** —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!", parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –°–∞–π—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{name}** –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"Error removing site: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

@dp.message(Command("list"))
async def cmd_list_sites(message: Message):
    """Command for showing list of sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π `/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url>`", parse_mode="Markdown")
        return
    
    sites_text = "üìù **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:**\n\n"
    for name, info in sites.items():
        status_emoji = "üü¢" if info.get("is_up", True) else "üî¥"
        last_check = info.get("last_check")
        if last_check != None:
            last_check = datetime.fromisoformat(last_check).strftime("%d.%m.%Y %H:%M")
        
        sites_text += f"{status_emoji} **{name}**\n"
        sites_text += f"   URL: {info['url']}\n"
        sites_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        
        # Add response time if available
        last_response_time = info.get("last_response_time")
        if last_response_time is not None:
            speed_emoji, speed_desc = get_speed_info(last_response_time)
            sites_text += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {last_response_time} –º—Å ({speed_desc})\n"
        
        sites_text += "\n"
    
    await message.answer(sites_text, parse_mode="Markdown")

@dp.message(Command("check"))
async def cmd_check_sites(message: Message):
    """Command for checking all sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url>`", parse_mode="Markdown")
        return
    
    # Send message about start of checking
    status_msg = await message.answer("üîç Checking site availability...")
    
    # Check all sites
    results = await site_monitor.check_all_sites(proxy_manager)
    
    # Form report
    report = "üìä **Site check results:**\n\n"
    
    for result in results:
        status_emoji = "üü¢" if result["is_up"] else "üî¥"
        status_text = "Available" if result["is_up"] else "Unavailable"
        
        report += f"{status_emoji} **{result['name']}**\n"
        report += f"   URL: {result['url']}\n"
        report += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
        
        # Add response time with speed emoji
        if result.get("response_time") is not None:
            speed_emoji, speed_desc = get_speed_info(result['response_time'])
            report += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {result['response_time']} –º—Å ({speed_desc})\n"
        else:
            report += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ‚ùì N/A\n"
        
        # Add proxy information
        if result.get("proxy_used"):
            report += f"   üåç –ü—Ä–æ–∫—Å–∏: {result['proxy_used']}\n"
        
        if result.get("status_code"):
            report += f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}\n"
        elif result.get("error"):
            report += f"   –û—à–∏–±–∫–∞: {result['error']}\n"
        
        report += "\n"
    
    # Update message with results
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=status_msg.message_id,
        text=report,
        parse_mode="Markdown"
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """Command for showing current status of all sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url>`", parse_mode="Markdown")
        return
    
    status_text = "üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:**\n\n"
    
    for name, info in sites.items():
        status_emoji = "üü¢" if info.get("is_up", True) else "üî¥"
        status_text += f"{status_emoji} **{name}**\n"
        status_text += f"   URL: {info['url']}\n"
        
        last_check = info.get("last_check")
        if last_check:
            last_check_dt = datetime.fromisoformat(last_check)
            status_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        last_status = info.get("last_status")
        if last_status is not None:
            status_text += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {last_status}\n"
        
        last_response_time = info.get("last_response_time")
        if last_response_time is not None:
            speed_emoji, speed_desc = get_speed_info(last_response_time)
            status_text += f"   ‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {last_response_time} –º—Å ({speed_desc})\n"
        
        status_text += "\n"
    
    await message.answer(status_text, parse_mode="Markdown")

# Commands for proxy management
@dp.message(Command("proxy_add"))
async def cmd_add_proxy(message: Message):
    """Command for adding proxy"""
    try:
        # Parse command: /proxy_add name url country
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/proxy_add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url> <—Å—Ç—Ä–∞–Ω–∞>`\n\n–ü—Ä–∏–º–µ—Ä: `/proxy_add us_proxy http://proxy.example.com:8080 us`", parse_mode="Markdown")
            return
        
        name = parts[1].lower()
        proxy_url = parts[2]
        country = parts[3].lower()
        
        # Check proxy URL format
        if not proxy_url.startswith(('http://', 'https://', 'socks5://')):
            proxy_url = 'http://' + proxy_url
        
        # Add proxy
        if await proxy_manager.add_proxy(name, proxy_url, country, message.from_user.id):
            await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ **{name}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nURL: {proxy_url}\nüåç –°—Ç—Ä–∞–Ω–∞: {country.upper()}", parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"Error adding proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


@dp.message(Command("proxy_remove"))
async def cmd_remove_proxy(message: Message):
    """Command for removing proxy"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/proxy_remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n\n–ü—Ä–∏–º–µ—Ä: `/proxy_remove us_proxy`", parse_mode="Markdown")
            return
        
        name = parts[1].lower()
        
        if await proxy_manager.remove_proxy(name):
            await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ **{name}** —É–¥–∞–ª–µ–Ω!", parse_mode="Markdown")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{name}** –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"Error removing proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


@dp.message(Command("proxy_list"))
async def cmd_list_proxies(message: Message):
    """Command for showing list of proxies"""
    proxies = proxy_manager.get_proxies()
    
    if not proxies:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∫–æ–º–∞–Ω–¥–æ–π `/proxy_add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <url> <—Å—Ç—Ä–∞–Ω–∞>`", parse_mode="Markdown")
        return
    
    proxies_text = "üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:**\n\n"
    for name, info in proxies.items():
        status_emoji = "üü¢" if info.get("is_active", True) else "üî¥"
        country_emoji = "üåç"
        
        proxies_text += f"{status_emoji} **{name}**\n"
        proxies_text += f"   URL: {info['proxy_url']}\n"
        proxies_text += f"   {country_emoji} –°—Ç—Ä–∞–Ω–∞: {info['country'].upper()}\n"
        proxies_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {info.get('success_count', 0)}\n"
        proxies_text += f"   ‚ùå –û—à–∏–±–æ–∫: {info.get('fail_count', 0)}\n"
        
        last_used = info.get("last_used")
        if last_used:
            last_used_dt = datetime.fromisoformat(last_used)
            proxies_text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        proxies_text += "\n"
    
    await message.answer(proxies_text, parse_mode="Markdown")


@dp.message(Command("proxy_test"))
async def cmd_test_proxy(message: Message):
    """Command for testing proxy"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/proxy_test <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n\n–ü—Ä–∏–º–µ—Ä: `/proxy_test us_proxy`", parse_mode="Markdown")
            return
        
        name = parts[1].lower()
        proxy_info = proxy_manager.proxies.get(name)
        
        if not proxy_info:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **{name}** –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="Markdown")
            return
        
        # Send message about start of testing
        status_msg = await message.answer(f"üîç Testing proxy **{name}**...")
        
        # Test proxy
        is_working = await proxy_manager.test_proxy(proxy_info["proxy_url"])
        
        if is_working:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚úÖ –ü—Ä–æ–∫—Å–∏ **{name}** —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nURL: {proxy_info['proxy_url']}\nüåç –°—Ç—Ä–∞–Ω–∞: {proxy_info['country'].upper()}",
                parse_mode="Markdown"
            )
        else:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚ùå –ü—Ä–æ–∫—Å–∏ **{name}** –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nURL: {proxy_info['proxy_url']}\nüåç –°—Ç—Ä–∞–Ω–∞: {proxy_info['country'].upper()}",
                parse_mode="Markdown"
            )
    
    except Exception as e:
        logger.error(f"Error testing proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


async def main():
    """Main function"""
    logger.info("Starting bot for site monitoring...")
    
    # Initialize monitors
    await site_monitor.initialize()
    await proxy_manager.initialize()
    
    # Start periodic checking in background
    asyncio.create_task(periodic_check(site_monitor, proxy_manager))
    
    # Start bot
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
