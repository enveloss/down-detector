import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message

from src import config
from src.site_monitor import SiteMonitor
from src.proxy_manager import ProxyManager
from src.periodic_checker import periodic_check
from src.logger import logger

class AdminFilter(BaseFilter):
    """Filter for checking administrator access"""
    
    async def __call__(self, message: Message) -> bool:
        return str(message.from_user.id) in config.ADMINS

# Create filter instance
admin_filter = AdminFilter()

def get_speed_info(response_time: float) -> tuple[str, str]:
    """Returns emoji and description of response speed"""
    if response_time is None:
        return "‚ùì", "unknown"
    elif response_time < 200:
        return "‚ö°", "very fast"
    elif response_time < 500:
        return "üü¢", "fast"
    elif response_time < 1000:
        return "üü°", "medium"
    elif response_time < 3000:
        return "üü†", "slow"
    else:
        return "üî¥", "very slow"

def get_content_type_emoji(content_type: str) -> str:
    """Returns emoji for content type"""
    if not content_type:
        return "üìÑ"
    content_type_lower = content_type.lower()
    if "application/json" in content_type_lower:
        return "üìã"
    elif "text/html" in content_type_lower:
        return "üåê"
    elif "text/" in content_type_lower:
        return "üìÑ"
    else:
        return "üìÑ"

# Bot and dispatcher initialization
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

dp.message.filter(admin_filter)

# Create monitor instances
site_monitor = SiteMonitor()
proxy_manager = ProxyManager()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Command /start"""
    welcome_text = """
ü§ñ <b>DOWN DETECTOR</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt; [content-type] - –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ /remove &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã
‚Ä¢ /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã —Å–µ–π—á–∞—Å
‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤

<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–∫—Å–∏:</b>
‚Ä¢ /proxy_add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt; &lt;—Å—Ç—Ä–∞–Ω–∞&gt; - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏
‚Ä¢ /proxy_remove &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏
‚Ä¢ /proxy_list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏
‚Ä¢ /proxy_test &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>
‚Ä¢ üåê HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (text/html) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
‚Ä¢ üìã JSON API (application/json)
‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (text/*)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /add google https://google.com
‚Ä¢ /add api_ping https://api.example.com/ping application/json
‚Ä¢ /add text_api https://api.example.com/status text/plain
‚Ä¢ /proxy_add us_proxy http://proxy.example.com:8080 us
‚Ä¢ /remove google
    """
    
    await message.answer(welcome_text)

@dp.message(Command("add"))
async def cmd_add_site(message: Message):
    """Command for adding a site"""
    try:
        # Parse command: /add name url [content-type]
        parts = message.text.split(maxsplit=3)
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt; [content-type]\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /add google https://google.com\n‚Ä¢ /add api_ping https://api.example.com/ping application/json\n‚Ä¢ /add text_api https://api.example.com/status text/plain")
            return
        
        name = parts[1].lower()
        url = parts[2]
        expected_content_type = parts[3] if len(parts) > 3 else "text/html"
        
        # Check URL format
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # Add site
        if await site_monitor.add_site(name, url, message.from_user.id, expected_content_type):
            content_emoji = "üåê"
            if expected_content_type == "application/json":
                content_emoji = "üìã"
            elif expected_content_type.startswith("text/"):
                content_emoji = "üìÑ"
            
            response_text = f"‚úÖ –°–∞–π—Ç <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n\nURL: {url}\n{content_emoji} –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_content_type}\nüîÑ –ü—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
            await message.answer(response_text)
        else:
            await message.answer(f"‚ùå –°–∞–π—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    except Exception as e:
        logger.error(f"Error adding site: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

@dp.message(Command("remove"))
async def cmd_remove_site(message: Message):
    """Command for removing a site"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;\n\n–ü—Ä–∏–º–µ—Ä: /remove google")
            return
        
        name = parts[1].lower()
        
        if await site_monitor.remove_site(name):
            await message.answer(f"‚úÖ –°–∞–π—Ç <b>{name}</b> —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        else:
            await message.answer(f"‚ùå –°–∞–π—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    except Exception as e:
        logger.error(f"Error removing site: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

@dp.message(Command("list"))
async def cmd_list_sites(message: Message):
    """Command for showing list of sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt;")
        return
    
    sites_text = "üìù <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:</b>\n\n"
    for name, info in sites.items():
        status_emoji = "üü¢" if info.get("is_up", True) else "üî¥"
        last_check = info.get("last_check")
        if last_check != None:
            last_check = datetime.fromisoformat(last_check).strftime("%d.%m.%Y %H:%M")
        
        sites_text += f"{status_emoji} <b>{name}</b>\n"
        sites_text += f"   URL: {info['url']}\n"
        
        # Add expected content type
        expected_content_type = info.get("expected_content_type", "text/html")
        content_emoji = "üåê"
        if expected_content_type == "application/json":
            content_emoji = "üìã"
        elif expected_content_type.startswith("text/"):
            content_emoji = "üìÑ"
        sites_text += f"   {content_emoji} –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_content_type}\n"
        sites_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        
        # Add actual content type information
        last_content_type = info.get("last_content_type", "")
        if last_content_type:
            content_emoji = get_content_type_emoji(last_content_type)
            sites_text += f"   {content_emoji} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø: {last_content_type}\n"
        
        # Add response time if available
        last_response_time = info.get("last_response_time")
        if last_response_time is not None:
            speed_emoji, speed_desc = get_speed_info(last_response_time)
            sites_text += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {last_response_time} –º—Å ({speed_desc})\n"
        
        sites_text += "\n"
    
    await message.answer(sites_text)

@dp.message(Command("check"))
async def cmd_check_sites(message: Message):
    """Command for checking all sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –ù–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt;")
        return
    
    # Send message about start of checking
    status_msg = await message.answer("üîç Checking site availability...")
    
    # Check all sites
    results = await site_monitor.check_all_sites(proxy_manager)
    
    # Form report
    report = "üìä <b>Site check results:</b>\n\n"
    
    for result in results:
        status_emoji = "üü¢" if result["is_up"] else "üî¥"
        status_text = "Available" if result["is_up"] else "Unavailable"
        
        report += f"{status_emoji} <b>{result['name']}</b>\n"
        report += f"   URL: {result['url']}\n"
        report += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
        
        # Add expected content type
        site_info = site_monitor.get_sites().get(result['name'], {})
        expected_content_type = site_info.get("expected_content_type", "text/html")
        content_emoji = "üåê"
        if expected_content_type == "application/json":
            content_emoji = "üìã"
        elif expected_content_type.startswith("text/"):
            content_emoji = "üìÑ"
        report += f"   {content_emoji} –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_content_type}\n"
        
        # Add response time with speed emoji
        if result.get("response_time") is not None:
            speed_emoji, speed_desc = get_speed_info(result['response_time'])
            report += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {result['response_time']} –º—Å ({speed_desc})\n"
        else:
            report += f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ‚ùì N/A\n"
        
        # Add proxy information
        if result.get("proxy_used"):
            report += f"   üåç –ü—Ä–æ–∫—Å–∏: {result['proxy_used']}\n"
        
        if result.get("status_code"):
            report += f"   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}\n"
            
            # Add content type information
            content_type = result.get("content_type", "")
            if content_type:
                content_emoji = get_content_type_emoji(content_type)
                report += f"   {content_emoji} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø: {content_type}\n"
                
                # Show content type mismatch warning
                if not result.get("content_type_matches", True):
                    report += f"   ‚ö†Ô∏è –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º!\n"
        elif result.get("error"):
            report += f"   –û—à–∏–±–∫–∞: {result['error']}\n"
        
        report += "\n"
    
    # Update message with results
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=status_msg.message_id,
        text=report
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """Command for showing current status of all sites"""
    sites = site_monitor.get_sites()
    
    if not sites:
        await message.answer("üìù –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt;")
        return
    
    status_text = "üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:</b>\n\n"
    
    for name, info in sites.items():
        status_emoji = "üü¢" if info.get("is_up", True) else "üî¥"
        status_text += f"{status_emoji} <b>{name}</b>\n"
        status_text += f"   URL: {info['url']}\n"
        
        # Add expected content type
        expected_content_type = info.get("expected_content_type", "text/html")
        content_emoji = "üåê"
        if expected_content_type == "application/json":
            content_emoji = "üìã"
        elif expected_content_type.startswith("text/"):
            content_emoji = "üìÑ"
        status_text += f"   {content_emoji} –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_content_type}\n"
        
        last_check = info.get("last_check")
        if last_check:
            last_check_dt = datetime.fromisoformat(last_check)
            status_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        last_status = info.get("last_status")
        if last_status is not None:
            status_text += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {last_status}\n"
            
            # Add content type information
            last_content_type = info.get("last_content_type", "")
            if last_content_type:
                content_emoji = get_content_type_emoji(last_content_type)
                status_text += f"   {content_emoji} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø: {last_content_type}\n"
        
        last_response_time = info.get("last_response_time")
        if last_response_time is not None:
            speed_emoji, speed_desc = get_speed_info(last_response_time)
            status_text += f"   ‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {speed_emoji} {last_response_time} –º—Å ({speed_desc})\n"
        
        status_text += "\n"
    
    await message.answer(status_text)

# Commands for proxy management
@dp.message(Command("proxy_add"))
async def cmd_add_proxy(message: Message):
    """Command for adding proxy"""
    try:
        # Parse command: /proxy_add name url country
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /proxy_add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt; &lt;—Å—Ç—Ä–∞–Ω–∞&gt;\n\n–ü—Ä–∏–º–µ—Ä: /proxy_add us_proxy http://proxy.example.com:8080 us")
            return
        
        name = parts[1].lower()
        proxy_url = parts[2]
        country = parts[3].lower()
        
        # Check proxy URL format
        if not proxy_url.startswith(('http://', 'https://', 'socks5://')):
            proxy_url = 'http://' + proxy_url
        
        # Add proxy
        if await proxy_manager.add_proxy(name, proxy_url, country, message.from_user.id):
            await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nURL: {proxy_url}\nüåç –°—Ç—Ä–∞–Ω–∞: {country.upper()}")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    except Exception as e:
        logger.error(f"Error adding proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


@dp.message(Command("proxy_remove"))
async def cmd_remove_proxy(message: Message):
    """Command for removing proxy"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /proxy_remove &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;\n\n–ü—Ä–∏–º–µ—Ä: /proxy_remove us_proxy")
            return
        
        name = parts[1].lower()
        
        if await proxy_manager.remove_proxy(name):
            await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ <b>{name}</b> —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    except Exception as e:
        logger.error(f"Error removing proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


@dp.message(Command("proxy_list"))
async def cmd_list_proxies(message: Message):
    """Command for showing list of proxies"""
    proxies = proxy_manager.get_proxies()
    
    if not proxies:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∫–æ–º–∞–Ω–¥–æ–π /proxy_add &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;url&gt; &lt;—Å—Ç—Ä–∞–Ω–∞&gt;")
        return
    
    proxies_text = "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:</b>\n\n"
    for name, info in proxies.items():
        status_emoji = "üü¢" if info.get("is_active", True) else "üî¥"
        country_emoji = "üåç"
        
        proxies_text += f"{status_emoji} <b>{name}</b>\n"
        proxies_text += f"   URL: {info['proxy_url']}\n"
        proxies_text += f"   {country_emoji} –°—Ç—Ä–∞–Ω–∞: {info['country'].upper()}\n"
        proxies_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {info.get('success_count', 0)}\n"
        proxies_text += f"   ‚ùå –û—à–∏–±–æ–∫: {info.get('fail_count', 0)}\n"
        
        last_used = info.get("last_used")
        if last_used:
            last_used_dt = datetime.fromisoformat(last_used)
            proxies_text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        proxies_text += "\n"
    
    await message.answer(proxies_text)


@dp.message(Command("proxy_test"))
async def cmd_test_proxy(message: Message):
    """Command for testing proxy"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /proxy_test &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;\n\n–ü—Ä–∏–º–µ—Ä: /proxy_test us_proxy")
            return
        
        name = parts[1].lower()
        proxy_info = proxy_manager.proxies.get(name)
        
        if not proxy_info:
            await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # Send message about start of testing
        status_msg = await message.answer(f"üîç Testing proxy <b>{name}</b>...")
        
        # Test proxy
        is_working = await proxy_manager.test_proxy(proxy_info["proxy_url"])
        
        if is_working:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚úÖ –ü—Ä–æ–∫—Å–∏ <b>{name}</b> —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nURL: {proxy_info['proxy_url']}\nüåç –°—Ç—Ä–∞–Ω–∞: {proxy_info['country'].upper()}"
            )
        else:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚ùå –ü—Ä–æ–∫—Å–∏ <b>{name}</b> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nURL: {proxy_info['proxy_url']}\nüåç –°—Ç—Ä–∞–Ω–∞: {proxy_info['country'].upper()}"
            )
    
    except Exception as e:
        logger.error(f"Error testing proxy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏")


async def main():
    """Main function"""
    logger.info("Starting bot for site monitoring...")
    
    # Initialize monitors
    await site_monitor.initialize()
    await proxy_manager.initialize()
    
    # Start periodic checking in background
    asyncio.create_task(periodic_check(site_monitor, proxy_manager))
    
    # Start bot
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
